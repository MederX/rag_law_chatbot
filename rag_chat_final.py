import os
from loguru import logger
from langchain_community.vectorstores import FAISS
import re
import gradio as gr

logger.add("log/kyrgyz_laws_rag.log", format="{time} {level} {message}", level="DEBUG", rotation="100 KB", compression="zip")

def get_index_db():
    logger.debug('...get_index_db')
    from langchain_huggingface import HuggingFaceEmbeddings

    model_id = 'sentence-transformers/paraphrase-multilingual-MiniLM-L12-v2'
    embeddings = HuggingFaceEmbeddings(
        model_name=model_id,
        model_kwargs={'device': 'cuda'},  
    )

    db_file_name = 'db/laws_db'
    file_path = db_file_name + "/index.faiss"
    
    if os.path.exists(file_path):
        logger.debug('–ó–∞–≥—Ä—É–∑–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –±–∞–∑—ã')
        db = FAISS.load_local(db_file_name, embeddings, allow_dangerous_deserialization=True)
    else:
        logger.debug('–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π –∏–∑ .txt —Ñ–∞–π–ª–æ–≤')
        from langchain_community.document_loaders import TextLoader

        dir = 'laws'
        documents = []
        loaded_files = []
        
        for root, dirs, files in os.walk(dir):
            for file in files:
                if file.endswith(".txt"):
                    try:
                        logger.debug(f'–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞: {file}')
                        file_path = os.path.join(root, file)
                        loader = TextLoader(file_path, encoding='utf-8')
                        file_docs = loader.load()
                        
        
                        for doc in file_docs:
                            doc.metadata['source_file'] = file
                            doc.metadata['law_name'] = file.replace('.txt', '').replace('_', ' ')
                        
                        documents.extend(file_docs)
                        loaded_files.append(file)
                    except Exception as e:
                        logger.error(f'–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ {file}: {e}')

        logger.info(f'–ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(loaded_files)}')
        logger.info(f'–§–∞–π–ª—ã: {loaded_files}')

        from langchain.text_splitter import RecursiveCharacterTextSplitter
        text_splitter = RecursiveCharacterTextSplitter(
            chunk_size=800,  
            chunk_overlap=150,  
            separators=["\n\n", "\n", ". ", " "],  
            keep_separator=True
        )
        source_chunks = text_splitter.split_documents(documents)
        
        logger.info(f'–°–æ–∑–¥–∞–Ω–æ —á—É–Ω–∫–æ–≤: {len(source_chunks)}')

        db = FAISS.from_documents(source_chunks, embeddings)
        db.save_local(db_file_name)

    return db

def get_message_content(topic, db, k):
    logger.debug('...get_message_content')
    

    try:
        docs = db.max_marginal_relevance_search(topic, k=k, fetch_k=k*2)
    except:

        docs = db.similarity_search(topic, k=k)
    

    sources_content = {}
    for doc in docs:
        source = doc.metadata.get('source_file', 'unknown')
        law_name = doc.metadata.get('law_name', source)
        
        if source not in sources_content:
            sources_content[source] = {
                'law_name': law_name,
                'chunks': []
            }
        sources_content[source]['chunks'].append(doc.page_content)
    

    message_content = ""
    for i, (source, data) in enumerate(sources_content.items()):
        message_content += f"\n=== –ó–ê–ö–û–ù: {data['law_name']} ===\n"
        for j, chunk in enumerate(data['chunks']):

            clean_chunk = re.sub(r'\n+', ' ', chunk.strip())
            clean_chunk = re.sub(r'\s+', ' ', clean_chunk)
            message_content += f"{clean_chunk}\n"
        message_content += "\n"
    
    logger.debug(f"–ù–∞–π–¥–µ–Ω–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤: {len(sources_content)}")
    return message_content.strip()

def get_model_response(topic, message_content):
    logger.debug('...get_model_response')

    from langchain_ollama import ChatOllama
    llm = ChatOllama(
        model="llama3.2:3b-instruct-fp16", 
        temperature=0.1,  
        top_p=0.9,
        repeat_penalty=1.1
    )

    rag_prompt = """–¢—ã —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–π —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∑–∞–∫–æ–Ω–∞–º –ö—ã—Ä–≥—ã–∑—Å–∫–æ–π –†–µ—Å–ø—É–±–ª–∏–∫–∏. –û—Ç–≤–µ—á–∞–π –¢–û–õ–¨–ö–û –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.

–ö–û–ù–¢–ï–ö–°–¢ –ò–ó –ó–ê–ö–û–ù–û–í –ö–†:
{context}

–í–û–ü–†–û–°: {question}

–ò–ù–°–¢–†–£–ö–¶–ò–ò:
1. –û—Ç–≤–µ—á–∞–π –°–¢–†–û–ì–û –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
2. –ï—Å–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ - —Ç–∞–∫ –∏ —Å–∫–∞–∂–∏
3. –£–∫–∞–∑—ã–≤–∞–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Å—Ç–∞—Ç—å–∏/–ø—É–Ω–∫—Ç—ã –∑–∞–∫–æ–Ω–æ–≤ –ø—Ä–∏ —Å—Å—ã–ª–∫–µ
4. –ò—Å–ø–æ–ª—å–∑—É–π —Ç–æ–ª—å–∫–æ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫ –∏ —Ç–æ–ª—å–∫–æ –∫–∏—Ä–∏–ª–ª–∏—Ü—É
5. –ë—É–¥—å —Ç–æ—á–Ω—ã–º –∏ –∫—Ä–∞—Ç–∫–∏–º (3-5 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π)
6. –ù–µ –¥–æ–±–∞–≤–ª—è–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –∫–æ—Ç–æ—Ä–æ–π –Ω–µ—Ç –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ

–û–¢–í–ï–¢:"""

    from langchain_core.messages import HumanMessage
    prompt = rag_prompt.format(context=message_content, question=topic)
    
    try:
        response = llm.invoke([HumanMessage(content=prompt)])
        
        answer = response.content.strip()
        

        english_patterns = [
            r'\b(according to|based on|however|therefore|thus|themselves|moreover|furthermore)\b',
            r'\b(Article|Section|Chapter|Paragraph)\b'
        ]
        
        for pattern in english_patterns:
            answer = re.sub(pattern, '', answer, flags=re.IGNORECASE)

        answer = re.sub(r'\s+', ' ', answer).strip()
        
        return answer
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç –º–æ–¥–µ–ª–∏: {e}")
        return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞."

def validate_answer(answer, context):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –æ—Ç–≤–µ—Ç–∞"""
    if len(answer.strip()) < 20:
        return False, "–û—Ç–≤–µ—Ç —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π"
    

    english_words = re.findall(r'\b[A-Za-z]+\b', answer)
    if len(english_words) > 1:  
        return False, f"–ù–∞–π–¥–µ–Ω—ã –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ —Å–ª–æ–≤–∞: {english_words}"
    
    return True, "OK"

def interactive_chat():
    """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º —á–∞—Ç–∞"""
    print("üèõÔ∏è  –ß–∞—Ç-–±–æ—Ç —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∑–∞–∫–æ–Ω–∞–º –ö—ã—Ä–≥—ã–∑—Å–∫–æ–π –†–µ—Å–ø—É–±–ª–∏–∫–∏")
    print("üìñ –í–≤–µ–¥–∏—Ç–µ '–≤—ã—Ö–æ–¥' –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è\n")
    
    db = get_index_db()
    
    while True:
        topic = input("‚ùì –í–∞—à —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–π –≤–æ–ø—Ä–æ—Å: ").strip()
        
        if topic.lower() in ['–≤—ã—Ö–æ–¥', 'exit', 'quit', 'q']:
            print("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
            break
            
        if not topic:
            print("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–æ–ø—Ä–æ—Å\n")
            continue
            
        try:
            print("üîç –ü–æ–∏—Å–∫ –≤ –∑–∞–∫–æ–Ω–∞—Ö –ö–†...")
            

            for k in [6, 4, 8]:
                message_content = get_message_content(topic, db, k)
                answer = get_model_response(topic, message_content)
                
                is_valid, validation_msg = validate_answer(answer, message_content)
                
                if is_valid:
                    break
                else:
                    logger.warning(f"–û—Ç–≤–µ—Ç –Ω–µ –ø—Ä–æ—à–µ–ª –≤–∞–ª–∏–¥–∞—Ü–∏—é (k={k}): {validation_msg}")
            
            print(f"\nüìã –û—Ç–≤–µ—Ç —é—Ä–∏–¥–∏—á–µ—Å–∫–æ–≥–æ —ç–∫—Å–ø–µ—Ä—Ç–∞:")
            print(f"{'='*50}")
            print(answer)
            print(f"{'='*50}\n")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–æ–ø—Ä–æ—Å–∞: {e}")
            print("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å.\n")


db_instance = None

def initialize_db():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    global db_instance
    if db_instance is None:
        db_instance = get_index_db()
    return db_instance

def process_question(question, history):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ Gradio –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ"""
    if not question.strip():
        return history + [("", "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–æ–ø—Ä–æ—Å")]
    
    try:

        history = history + [(question, "üîç –ü–æ–∏—Å–∫ –≤ –∑–∞–∫–æ–Ω–∞—Ö –ö–†...")]
        yield history
        
  
        db = initialize_db()
        

        answer = None
        for k in [6, 4, 8]:
            message_content = get_message_content(question, db, k)
            temp_answer = get_model_response(question, message_content)
            
            is_valid, validation_msg = validate_answer(temp_answer, message_content)
            
            if is_valid:
                answer = temp_answer
                break
            else:
                logger.warning(f"–û—Ç–≤–µ—Ç –Ω–µ –ø—Ä–æ—à–µ–ª –≤–∞–ª–∏–¥–∞—Ü–∏—é (k={k}): {validation_msg}")
        
        if answer is None:
            answer = "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å."
        
 
        history[-1] = (question, f"üìã **–û—Ç–≤–µ—Ç —é—Ä–∏–¥–∏—á–µ—Å–∫–æ–≥–æ —ç–∫—Å–ø–µ—Ä—Ç–∞:**\n\n{answer}")
        yield history
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–æ–ø—Ä–æ—Å–∞: {e}")
        error_msg = "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å."
        history[-1] = (question, error_msg)
        yield history

def create_gradio_interface():
    """–°–æ–∑–¥–∞–Ω–∏–µ Gradio –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
    

    initialize_db()
    
    with gr.Blocks(
        title="–≠–∫—Å–ø–µ—Ä—Ç –ø–æ –∑–∞–∫–æ–Ω–∞–º –ö–†",
        theme=gr.themes.Soft(),
        css="""
        .header {
            text-align: center;
            padding: 20px;
            background: linear-gradient(90deg, #1e40af, #3b82f6);
            color: white;
            border-radius: 10px;
            margin-bottom: 20px;
        }
        .chatbot {
            height: 500px;
        }
        """
    ) as interface:
        

        gr.HTML("""
        <div class="header">
            <h1>–Æ—Ä–∏–¥–∏—á–µ—Å–∫–∏–π —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∑–∞–∫–æ–Ω–∞–º –ö—ã—Ä–≥—ã–∑—Å–∫–æ–π –†–µ—Å–ø—É–±–ª–∏–∫–∏</h1>
            <p>–ó–∞–¥–∞–π—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –æ –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–µ –ö–† –∏ –ø–æ–ª—É—á–∏—Ç–µ —ç–∫—Å–ø–µ—Ä—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç</p>
        </div>
        """)
        
   
        chatbot = gr.Chatbot(
            label="–î–∏–∞–ª–æ–≥ —Å —ç–∫—Å–ø–µ—Ä—Ç–æ–º",
            elem_classes=["chatbot"],
            placeholder="–ó–¥–µ—Å—å –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –¥–∏–∞–ª–æ–≥ —Å —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–º —ç–∫—Å–ø–µ—Ä—Ç–æ–º",
            show_copy_button=True
        )
        

        msg = gr.Textbox(
            label="–í–∞—à —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–π –≤–æ–ø—Ä–æ—Å",
            placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –ö–∞–∫–∏–µ –ø—Ä–∞–≤–∞ –∏–º–µ–µ—Ç —Ä–∞–±–æ—Ç–Ω–∏–∫ –ø—Ä–∏ —É–≤–æ–ª—å–Ω–µ–Ω–∏–∏?",
            lines=2,
            max_lines=5
        )
        
    
        with gr.Row():
            submit_btn = gr.Button("–û—Ç–ø—Ä–∞–≤–∏—Ç—å", variant="primary", scale=2)
            clear_btn = gr.Button("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å —á–∞—Ç", variant="secondary", scale=1)
        
    
        gr.Examples(
            examples=[
                ["–ö–∞–∫–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –Ω—É–∂–Ω—ã –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –û–û–û?"],
                ["–ö–∞–∫–æ–π –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –æ–ø–ª–∞—Ç—ã —Ç—Ä—É–¥–∞ –≤ –ö–†?"],
                ["–ö–∞–∫–∏–µ –ø—Ä–∞–≤–∞ –∏–º–µ–µ—Ç –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—å –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ —Ç–æ–≤–∞—Ä–∞?"],
                ["–ö–∞–∫–æ–π —Å—Ä–æ–∫ –∏—Å–∫–æ–≤–æ–π –¥–∞–≤–Ω–æ—Å—Ç–∏ –ø–æ –≥—Ä–∞–∂–¥–∞–Ω—Å–∫–∏–º –¥–µ–ª–∞–º?"]
            ],
            inputs=msg,
            label="üí° –ü—Ä–∏–º–µ—Ä—ã –≤–æ–ø—Ä–æ—Å–æ–≤"
        )
        

        gr.Markdown("""
        ---
        ### –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:
        - –°–∏—Å—Ç–µ–º–∞ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∑–∞–∫–æ–Ω—ã –ö—ã—Ä–≥—ã–∑—Å–∫–æ–π –†–µ—Å–ø—É–±–ª–∏–∫–∏ –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –æ—Ç–≤–µ—Ç—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
        - –û—Ç–≤–µ—Ç—ã –Ω–æ—Å—è—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä –∏ –Ω–µ –∑–∞–º–µ–Ω—è—é—Ç –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—É—é —é—Ä–∏–¥–∏—á–µ—Å–∫—É—é –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é
        - –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ—á–Ω–æ–π –ø—Ä–∞–≤–æ–≤–æ–π –ø–æ–º–æ—â–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∫–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–º—É —é—Ä–∏—Å—Ç—É
        """)
        

        def clear_chat():
            return []
        
        def submit_and_clear(message, history):
  
            for updated_history in process_question(message, history):
                yield updated_history, ""
        

        submit_btn.click(
            submit_and_clear,
            inputs=[msg, chatbot],
            outputs=[chatbot, msg]
        )
        
        msg.submit(
            submit_and_clear,
            inputs=[msg, chatbot],
            outputs=[chatbot, msg]
        )
        
        clear_btn.click(
            clear_chat,
            outputs=[chatbot]
        )
    
    return interface

if __name__ == "__main__":

    print("–Æ—Ä–∏–¥–∏—á–µ—Å–∫–∏–π —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∑–∞–∫–æ–Ω–∞–º –ö–†")
    print("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –∑–∞–ø—É—Å–∫–∞:")
    print("1 - –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å Gradio")
    print("2 - –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —á–∞—Ç –≤ –∫–æ–Ω—Å–æ–ª–∏")
    print("3 - –û–¥–∏–Ω–æ—á–Ω—ã–π –≤–æ–ø—Ä–æ—Å –≤ –∫–æ–Ω—Å–æ–ª–∏")
    
    mode = input("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ä–µ–∂–∏–º–∞ (1-3): ").strip()
    
    if mode == "1" or mode == "":
    
        interface = create_gradio_interface()
        print("üåê –ó–∞–ø—É—Å–∫ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞...")
        print("üì± –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É: http://localhost:7860")
        print("üîó –ò–ª–∏ –ø–æ –∞–¥—Ä–µ—Å—É: http://127.0.0.1:7860")
        print("‚èπÔ∏è  –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")
        
        interface.launch(
            server_name="127.0.0.1",  
            server_port=7860,        
            share=True,              
            debug=False,
            show_error=True,
            inbrowser=True           
        )
    elif mode == "2":
        interactive_chat()
    else:
        db = get_index_db()
        NUMBER_RELEVANT_CHUNKS = 6  # –£–≤–µ–ª–∏—á–∏–ª –¥–ª—è –ª—É—á—à–µ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        topic = input("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–π –≤–æ–ø—Ä–æ—Å: ")
        message_content = get_message_content(topic, db, NUMBER_RELEVANT_CHUNKS)
        answer = get_model_response(topic, message_content)
        print("\nüìã –û—Ç–≤–µ—Ç –º–æ–¥–µ–ª–∏:")
        print(f"{'='*50}")
        print(answer)
        print(f"{'='*50}")